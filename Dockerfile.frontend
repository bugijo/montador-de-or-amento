# Fase de build: use a imagem oficial do Node.js para construir a aplicação
FROM node:18-alpine AS build-stage

WORKDIR /app

# Copiar arquivos de dependências do projeto raiz e frontend
COPY package*.json ./
COPY frontend/package*.json ./frontend/

# Instalar dependências do front-end
WORKDIR /app/frontend
RUN npm ci --only=production

# Copiar o código-fonte do front-end
COPY frontend/. ./

# Construir a aplicação em modo de produção
RUN npm run build

# Fase de produção: usa a imagem oficial do Nginx para servir a aplicação
FROM nginx:stable-alpine AS production-stage

# Instalar curl para health checks
RUN apk add --no-cache curl

# Copiar os arquivos de build do front-end para o diretório padrão do Nginx
COPY --from=build-stage /app/frontend/build /usr/share/nginx/html

# Copiar configuração customizada do Nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Criar usuário não-root para nginx
RUN addgroup -g 1001 -S nginx && \
    adduser -S nginx -u 1001 -G nginx

# Ajustar permissões
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Criar diretório para PID do nginx
RUN mkdir -p /var/run/nginx && \
    chown -R nginx:nginx /var/run/nginx

# Expor a porta 80 do Nginx
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Comando padrão para iniciar o Nginx
CMD ["nginx", "-g", "daemon off;"]