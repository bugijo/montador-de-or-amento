# Nome do nosso robô-assistente
name: Deploy do Site para GitHub Pages

# Gatilho: Quando o robô deve agir?
on:
  # Toda vez que houver uma alteração na branch 'main'
  push:
    branches: ["main"]
  # Permite que você rode manualmente pela aba "Actions"
  workflow_dispatch:

# Permissões que o robô precisa para publicar o site
permissions:
  contents: read
  pages: write
  id-token: write

# Garante que apenas um deploy aconteça por vez
concurrency:
  group: "pages"
  cancel-in-progress: false

# As tarefas que o robô vai executar
jobs:
  # Tarefa 1: Construir o site
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Baixar o código-fonte
        uses: actions/checkout@v4
      
      - name: 2. Preparar o ambiente Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          # Aponta para o package-lock.json dentro da pasta frontend
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: 3. Instalar as dependências do projeto
        run: npm install
        # Define o diretório de trabalho para a pasta frontend
        working-directory: ./frontend
        
      - name: 4. Construir o site (o comando mágico)
        run: npm run build
        working-directory: ./frontend
        
      - name: 5. Preparar o pacote para publicação
        uses: actions/configure-pages@v5
        
      - name: 6. Fazer o upload do site construído
        uses: actions/upload-pages-artifact@v3
        with:
          # Pega o conteúdo da pasta 'build' que foi criada dentro de 'frontend'
          path: './frontend/build'

  # Tarefa 2: Publicar o site
  deploy:
    # Precisa que a tarefa 'build' termine com sucesso
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Publicar no GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
